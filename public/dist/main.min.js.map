{"version":3,"sources":["app.js","login/login.ctrl.js","main/main.ctrl.js","registration/registration.ctrl.js","main/lists/lists.ctrl.js","main/profile/profile.ctrl.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/cards.fctr.js","common/services/list.fctr.js","common/services/user.fctr.js","common/directives/card/card.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/custom-focus/custom-focus.js","common/directives/file-reader/file-reader.drv.js","common/directives/list/list.drv.js","common/directives/on-finish-render/on-finish-render.drv.js"],"names":["configRouter","$locationProvider","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","controllerAs","abstract","otherwise","html5Mode","configRun","$rootScope","$state","$window","$on","event","toState","stateNames","name","split","document","body","className","length","angular","module","config","run","$inject","LoginPageController","AuthService","login","validate","vm","submitted","userData","email","password","response","localStorage","token","user","go","username","error","message","data","clearMessageError","this","MainPageController","$scope","UserService","activate","get","responce","avatar","closeDropdown","showDropdown","logout","RegistrationPageController","registration","save","ListsPageController","$stateParams","ListService","lists","setResizeScroll","createNewList","newListTitle","title","focusOn","setVisibleNewList","visibleNewList","reloadLists","widthAllElemet","querySelector","style","width","$broadcast","listOptions","accept","sourceNodeScope","destNodesScope","destIndex","list","$element","hasClass","listPlaceholder","card","cardPlaceholder","dropped","console","log","sort","ProfilePageController","updateData","update","messageDone","$emit","messageError","changeAvatar","image","reader","type","localeCompare","alert","FileReader","onload","target","result","readAsDataURL","configInterceptors","$httpProvider","interceptors","push","authInterceptor","$q","$injector","request","headers","Authorization","responseError","status","reject","factory","$resource","method","params","CardService","query","isArray","id","cardDirective","directive","require","restrict","replace","scope","cardController","bindToController","clickOutsideDirective","$document","$parse","linkFunc","element","attrs","fn","eventHandler","childElement","contains","$apply","on","off","link","customFocusDirective","$timeout","$watch","value","focus","trigger","fileReaderDirective","files","bind","listDirective","reload","listController","showNewCardInput","visibleNewCard","removeList","listID","createNewCard","newCardsText","text","cards","saveNewTitle","visibleEditTitle","cancelEditTitle","previousText","_id","val","onFinishRender","$last"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n\n  angular\n    .module('trelloProject', ['ui.router', 'ngResource', 'ui.tree', 'ngScrollable'])\n    .config(configRouter)\n    .run(configRun)\n\n    configRouter.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider){\n      $stateProvider\n        .state('home', {\n          url: '/',\n          templateUrl: './scripts/home/home.tpl.html'\n        })\n        .state('login', {\n          url: '/signin',\n          templateUrl: './scripts/login/login.tpl.html',\n          controller: 'LoginPageController',\n          controllerAs: 'vm'\n        })\n        .state('registration',{\n          url: '/registration',\n          templateUrl: './scripts/registration/registration.tpl.html',\n          controller: 'RegistrationPageController',\n          controllerAs: 'vm'\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          templateUrl: './scripts/main/main.tpl.html',\n          controller: 'MainPageController',\n          controllerAs: 'vm'\n        })\n        .state('main.lists',{\n          url: '/user/:username',\n          templateUrl: './scripts/main/lists/lists.tpl.html',\n          controller: 'ListsPageController',\n          controllerAs: 'vm'\n        })\n        .state('main.profile',{\n          url: '/profile',\n          templateUrl: './scripts/main/profile/profile.tpl.html',\n          controller: 'ProfilePageController',\n          controllerAs: 'vm'\n        })\n        .state('notfound', {\n          url: '/404',\n          templateUrl: './scripts/404/404.tpl.html'\n        });\n\n      $urlRouterProvider.otherwise('/404');\n      $locationProvider.html5Mode(true);\n    }\n\n    configRun.$inject = ['$rootScope', '$state', '$window'];\n    function configRun($rootScope, $state, $window) {\n      $rootScope.$on('$stateChangeSuccess', function(event, toState){\n        var stateNames = toState.name.split('.');\n        document.body.className = stateNames[stateNames.length - 1] + '-page';\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('LoginPageController', LoginPageController);\n\n    LoginPageController.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function LoginPageController($window, $state, AuthService) {\n      var vm = this;\n\n      vm.login = login;\n      vm.clearMessageError = clearMessageError;\n\n      function login(validate) {\n        vm.submitted = true;\n\n        if (validate) {\n          var userData = {\n            email: vm.email,\n            password: vm.password\n          };\n\n          AuthService.login({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = response.user;\n            $state.go('main.lists', { username: response.user });\n\n          }, function (error) {\n            delete $window.localStorage.token;\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('MainPageController', MainPageController);\n\n    MainPageController.$inject = ['$scope', '$state', '$window', 'UserService'];\n    function MainPageController($scope, $state, $window, UserService) {\n      var vm = this;\n      vm.showDropdown = false;\n      vm.closeDropdown = closeDropdown;\n      vm.logout = logout;\n      $scope.$on('reloadUserData', activate);\n\n      activate();\n\n      function activate() {\n        UserService.get({}, function(responce) {\n          vm.avatar = responce.user.avatar;\n          vm.name = responce.user.name;\n        });\n      }\n\n      function closeDropdown() {\n        vm.showDropdown = false;\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        delete $window.localStorage.user;\n        $state.go('home');\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('RegistrationPageController', RegistrationPageController);\n\n    RegistrationPageController.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function RegistrationPageController($window, $state, AuthService) {\n      var vm = this;\n      vm.registration = registration;\n      vm.clearMessageError = clearMessageError;\n\n      function registration(validate) {\n        vm.submitted = true;\n\n        if (validate) {\n          var userData = {\n            username: vm.name,\n            email:    vm.email,\n            password: vm.password\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = vm.name;\n            $state.go(\"main.lists\", { username: vm.name });\n\n          }, function (error) {\n            delete $window.localStorage.token;\n            vm.message = error.data.message;\n          });\n\n        }\n      }\n\n      function clearMessageError() {\n        if (vm.message) {\n          vm.message = null;\n        }\n      }\n\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('ListsPageController', ListsPageController);\n\n    ListsPageController.$inject = [\"$scope\", \"$stateParams\", \"ListService\"];\n    function ListsPageController($scope, $stateParams, ListService) {\n      var vm = this;\n      var user = $stateParams.username;\n      vm.visibleNewList = false;\n      vm.createNewList = createNewList;\n      vm.setVisibleNewList = setVisibleNewList;\n      vm.reloadLists = reloadLists;\n\n      activate();\n\n      $scope.listOptions = {\n        accept: function(sourceNodeScope, destNodesScope, destIndex) {\n          var list = sourceNodeScope.$element.hasClass(\"list__wrapper\");\n          var listPlaceholder = destNodesScope.$element.hasClass(\"list__placeholder\");\n          var card = sourceNodeScope.$element.hasClass(\"list__card\");\n          var cardPlaceholder = destNodesScope.$element.hasClass(\"card__placeholder\");\n\n          if (list === listPlaceholder) {\n            return true;\n          } if (card === cardPlaceholder) {\n            return true;\n          }\n        },\n        dropped: function() {\n          console.log('im dropped');\n          console.log(vm.lists)\n          ListService.sort({ user: user }, {lists: vm.lists}, function(responce) {\n\n          });\n        }\n      }\n\n      // $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n      //   // $scope.$broadcast('content.reload');\n      //   // $scope.$broadcast('content.changed');\n      // });\n\n      function activate() {\n        ListService.get({ user: user }, function(responce) {\n          vm.lists = responce.lists;\n          setResizeScroll();\n        });\n      }\n\n      function createNewList() {\n        if (vm.newListTitle) {\n\n          ListService.save({ user: user }, { title: vm.newListTitle }, function (response) {\n            vm.lists = response.lists;\n\n            vm.focusOn = true;\n            vm.newListTitle = null;\n            setResizeScroll();\n          });\n        }\n      }\n\n      function setVisibleNewList() {\n        vm.visibleNewList = true;\n        vm.focusOn = true;\n      }\n\n      function reloadLists() {\n        activate();\n      }\n\n      function setResizeScroll() {\n        var widthAllElemet = (vm.lists.length + 1) * 290;\n        document.querySelector('.lists__wrapper').style.width = widthAllElemet + 'px';\n        $scope.$broadcast('content.changed');\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('ProfilePageController', ProfilePageController);\n\n    ProfilePageController.$inject = ['$scope', '$window', 'UserService']\n    function ProfilePageController($scope, $window, UserService) {\n      var vm = this;\n      vm.updateData = updateData;\n      vm.changeAvatar = changeAvatar;\n\n      activate();\n\n      function activate() {\n        UserService.get({}, function(responce) {\n          vm.username = responce.user.name;\n          vm.email = responce.user.email;\n          vm.avatar = responce.user.avatar;\n        });\n      }\n\n      function updateData(validate) {\n\n        if (validate) {\n          var body = {\n            name: vm.username,\n            email: vm.email\n          };\n\n          UserService.update({}, body, function (response) {\n            vm.messageDone = response.message;\n            $window.localStorage.user = vm.username;\n            $scope.$emit('reloadUserData');\n          }, function (error) {\n            vm.messageError = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          alert('Image file format must be jpeg or png!');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatar = response.avatar;\n            $scope.$emit('reloadUserData');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('trelloProject')\n    .factory('AuthInterceptor', authInterceptor)\n    .config(configInterceptors);\n\n    configInterceptors.$inject = ['$httpProvider'];\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push('AuthInterceptor');\n    }\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$window', '$injector'];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = 'Bearer ' + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go('home'); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go('notfound');\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('AuthService', AuthService);\n\n    AuthService.$inject = ['$resource'];\n    function AuthService($resource) {\n      return $resource('/auth/:type', {\n        type: '@type'\n      },\n      {\n        save: {\n          method: 'POST',\n          params: {\n            type: 'signup'\n          }\n        },\n        login: {\n          method: 'POST',\n          params: {\n            type: 'login'\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('CardService', CardService);\n\n    CardService.$inject = ['$resource'];\n    function CardService($resource) {\n      var data = $resource('/api/user/:user/lists/:list/cards/:card', { user: '@user', list: '@list', card: '@card' }, {\n        query: {\n          method: 'GET',\n          isArray: false\n        },\n        update:  {\n          method: 'PUT'\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('ListService', ListService);\n\n    ListService.$inject = ['$resource'];\n    function ListService($resource) {\n      var data = $resource('/api/user/:user/lists/:id:type', { user: '@user', id: '@id', type: '@type'}, {\n        query: {\n          method: 'GET',\n          isArray: false\n        },\n        update:  {\n          method: 'PUT'\n        },\n        sort: {\n          method: 'POST',\n          params: {\n            type: 'sort'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource'];\n    function UserService($resource) {\n      var data = $resource('/api/user/:type', { type: \"@type\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        avatar: {\n          method: \"PUT\",\n          params: {\n            type: \"avatar\"\n          }\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('card', cardDirective);\n\n    function cardDirective() {\n      var directive = {\n        require: '^list',\n        restrict: 'E',\n        replace: true,\n        scope: {\n          data: '='\n        },\n        templateUrl: './scripts/common/directives/card/card.tpl.html',\n        controller: cardController,\n        controllerAs: 'vm',\n        bindToController: true\n      }\n\n      return directive;\n    }\n\n\n    function cardController() {\n      var vm = this;\n      // console.log(vm.data)\n    }\n})();\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"trelloProject\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","(function() {\n\n'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('customFocus', customFocusDirective)\n\n    customFocusDirective.$inject = ['$timeout'];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: 'A',\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"trelloProject\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('list', listDirective);\n\n    function listDirective() {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          data: '=',\n          reload: '&'\n        },\n        templateUrl: './scripts/common/directives/list/list.tpl.html',\n        controller: listController,\n        controllerAs: 'vm',\n        bindToController: true\n      }\n\n      return directive;\n\n    }\n\n    listController.$inject = ['$scope', '$stateParams', 'ListService', 'CardService'];\n    function listController($scope, $stateParams, ListService, CardService) {\n      var vm = this;\n      var user = $stateParams.username;\n      var listID = vm.data._id;\n\n      var previousText; // for saving\n\n      vm.visibleNewCard = false;\n      vm.saveNewTitle = saveNewTitle;\n      vm.closeDropdown = closeDropdown;\n      vm.createNewCard = createNewCard;\n      vm.showNewCardInput = showNewCardInput;\n      vm.removeList = removeList;\n      vm.cancelEditTitle = cancelEditTitle;\n\n      // watch start edit text or not\n      $scope.$watch('vm.visibleEditTitle', function(val) {\n        if (val === true) {\n          previousText = vm.data.title;\n        }\n      })\n\n      function closeDropdown() {\n        vm.showDropdown = false;\n      }\n\n      function showNewCardInput() {\n        vm.visibleNewCard = true;\n        vm.focusOn = true;\n      }\n\n      function removeList() {\n        ListService.delete({user: user, id: listID }, function (response) {\n          vm.reload();\n        });\n      }\n\n      function createNewCard() {\n        if (vm.newCardsText) {\n          var newCards = {\n            text: vm.newCardsText\n          }\n\n          CardService.save({ user: user, list: listID }, { text: vm.newCardsText }, function (response) {\n            vm.data.cards = response.cards;\n            vm.focusOn = true;\n            vm.newCardsText = null;\n          });\n        }\n      }\n\n      function saveNewTitle(validate) {\n        if (validate) {\n          ListService.update({ user: user, id: listID }, { title: vm.data.title }, function(response) {\n            vm.visibleEditTitle = false;\n          })\n        }\n      }\n\n      function cancelEditTitle() {\n        vm.visibleEditTitle = false;\n        vm.data.title = previousText;\n      }\n    }\n})();\n","(function() {\n\n'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('onFinishRender', onFinishRender)\n\n    onFinishRender.$inject = ['$timeout'];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function () {\n            scope.$emit('ngRepeatFinished');\n          });\n        }\n      }\n    }\n\n}());\n"],"sourceRoot":"/source/"}