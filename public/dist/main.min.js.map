{"version":3,"sources":["app.js","login/login.ctrl.js","main/main.ctrl.js","registration/registration.ctrl.js","common/services/auth-interceptor.fctr.js","common/services/auth.fctr.js","common/services/cards.fctr.js","common/services/list.fctr.js","common/services/user.fctr.js","main/lists/lists.ctrl.js","main/profile/profile.ctrl.js","common/directives/card/card.drv.js","common/directives/change-background/change-background.drv.js","common/directives/click-outside/click-outside.drv.js","common/directives/custom-focus/custom-focus.js","common/directives/file-reader/file-reader.drv.js","common/directives/list/list.drv.js","common/directives/on-finish-render/on-finish-render.drv.js"],"names":["configRouter","$locationProvider","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","controllerAs","abstract","otherwise","html5Mode","configRun","$rootScope","$state","$window","$on","event","toState","stateNames","name","split","lastState","length","document","body","className","angular","module","config","run","$inject","LoginPageController","AuthService","login","validate","vm","submitted","userData","email","password","response","localStorage","token","user","go","username","error","message","data","clearMessageError","this","MainPageController","$scope","UserService","activate","get","responce","avatar","closeDropdown","showDropdown","logout","RegistrationPageController","registration","save","configInterceptors","$httpProvider","interceptors","push","authInterceptor","$q","$injector","request","headers","Authorization","responseError","status","reject","factory","$resource","type","method","params","CardService","list","card","query","isArray","update","ListService","id","sort","background","ListsPageController","$stateParams","lists","setResizeScroll","createNewList","newListTitle","title","focusOn","setVisibleNewList","visibleNewList","reloadLists","widthAllElemet","querySelector","style","width","$broadcast","listOptions","accept","sourceNodeScope","destNodesScope","destIndex","$element","hasClass","listPlaceholder","cardPlaceholder","dropped","ProfilePageController","updateData","messageDone","$emit","messageError","changeAvatar","image","reader","localeCompare","alert","FileReader","onload","target","result","readAsDataURL","cardDirective","directive","restrict","replace","scope","listId","reload","cardController","bindToController","editCard","closeEditingCard","text","previousText","changeCardText","removeCard","listID","cardID","saveEditingCard","_id","$watch","val","changeBackground","linkFunc","element","attrs","clickHandler","bind","link","clickOutsideDirective","$document","$parse","fn","eventHandler","childElement","contains","$apply","on","off","customFocusDirective","$timeout","value","focus","trigger","fileReaderDirective","files","listDirective","listController","showNewCardInput","visibleNewCard","removeList","createNewCard","newCardsText","cards","saveNewTitle","visibleEditTitle","cancelEditTitle","reloadCard","onFinishRender","$last"],"mappings":"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","file":"main.min.js","sourcesContent":["(function() {\n\n  angular\n    .module('trelloProject', ['ui.router', 'ngResource', 'ui.tree', 'ngScrollable', 'monospaced.elastic'])\n    .config(configRouter)\n    .run(configRun)\n\n    configRouter.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n    function configRouter($locationProvider, $stateProvider, $urlRouterProvider){\n      $stateProvider\n        .state('home', {\n          url: '/',\n          templateUrl: './scripts/home/home.tpl.html'\n        })\n        .state('login', {\n          url: '/signin',\n          templateUrl: './scripts/login/login.tpl.html',\n          controller: 'LoginPageController',\n          controllerAs: 'vm'\n        })\n        .state('registration',{\n          url: '/registration',\n          templateUrl: './scripts/registration/registration.tpl.html',\n          controller: 'RegistrationPageController',\n          controllerAs: 'vm'\n        })\n        .state(\"main\", {\n          url: \"\",\n          abstract: true,\n          templateUrl: './scripts/main/main.tpl.html',\n          controller: 'MainPageController',\n          controllerAs: 'vm'\n        })\n        .state('main.lists',{\n          url: '/user/:username',\n          templateUrl: './scripts/main/lists/lists.tpl.html',\n          controller: 'ListsPageController',\n          controllerAs: 'vm'\n        })\n        .state('main.profile',{\n          url: '/profile',\n          templateUrl: './scripts/main/profile/profile.tpl.html',\n          controller: 'ProfilePageController',\n          controllerAs: 'vm'\n        })\n        .state('notfound', {\n          url: '/404',\n          templateUrl: './scripts/404/404.tpl.html'\n        });\n\n      $urlRouterProvider.otherwise('/404');\n      $locationProvider.html5Mode(true);\n    }\n\n    configRun.$inject = ['$rootScope', '$state', '$window'];\n    function configRun($rootScope, $state, $window) {\n      $rootScope.$on('$stateChangeSuccess', function(event, toState){\n        var stateNames = toState.name.split('.');\n        var lastState = stateNames[stateNames.length - 1];\n\n        if (lastState !== 'lists') {\n          document.body.className = lastState + '-page';\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('LoginPageController', LoginPageController);\n\n    LoginPageController.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function LoginPageController($window, $state, AuthService) {\n      var vm = this;\n\n      vm.login = login;\n      vm.clearMessageError = clearMessageError;\n\n      function login(validate) {\n        vm.submitted = true;\n\n        if (validate) {\n          var userData = {\n            email: vm.email,\n            password: vm.password\n          };\n\n          AuthService.login({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = response.user;\n            $state.go('main.lists', { username: response.user });\n\n          }, function (error) {\n            delete $window.localStorage.token;\n            vm.message = error.data.message;\n          });\n        }\n      }\n\n      function clearMessageError() {\n        vm.message = null;\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('MainPageController', MainPageController);\n\n    MainPageController.$inject = ['$scope', '$state', '$window', 'UserService'];\n    function MainPageController($scope, $state, $window, UserService) {\n      var vm = this;\n      vm.showDropdown = false;\n      vm.closeDropdown = closeDropdown;\n      vm.logout = logout;\n      $scope.$on('reloadUserData', activate);\n\n      activate();\n\n      function activate() {\n        UserService.get({}, function(responce) {\n          vm.avatar = responce.user.avatar;\n          vm.name = responce.user.name;\n        });\n      }\n\n      function closeDropdown() {\n        vm.showDropdown = false;\n      }\n\n      function logout() {\n        delete $window.localStorage.token;\n        delete $window.localStorage.user;\n        $state.go('home');\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('RegistrationPageController', RegistrationPageController);\n\n    RegistrationPageController.$inject = [\"$window\", \"$state\", \"AuthService\"];\n    function RegistrationPageController($window, $state, AuthService) {\n      var vm = this;\n      vm.registration = registration;\n      vm.clearMessageError = clearMessageError;\n\n      function registration(validate) {\n        vm.submitted = true;\n\n        if (validate) {\n          var userData = {\n            username: vm.name,\n            email:    vm.email,\n            password: vm.password\n          }\n\n          AuthService.save({}, userData, function (response) {\n            $window.localStorage.token = response.token;\n            $window.localStorage.user = vm.name;\n            $state.go(\"main.lists\", { username: vm.name });\n\n          }, function (error) {\n            delete $window.localStorage.token;\n            vm.message = error.data.message;\n          });\n\n        }\n      }\n\n      function clearMessageError() {\n        if (vm.message) {\n          vm.message = null;\n        }\n      }\n\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('trelloProject')\n    .factory('AuthInterceptor', authInterceptor)\n    .config(configInterceptors);\n\n    configInterceptors.$inject = ['$httpProvider'];\n    function configInterceptors($httpProvider) {\n      $httpProvider.interceptors.push('AuthInterceptor');\n    }\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$window', '$injector'];\n    function authInterceptor($rootScope, $q, $window, $injector) {\n      return {\n        request: function (config) {\n          config.headers = config.headers || {};\n          if ($window.localStorage.token) {\n            config.headers.Authorization = 'Bearer ' + $window.localStorage.token;\n          }\n          return config;\n        },\n        responseError: function (response) {\n          if (response.status === 401) {\n            // handle the case where the user is not authenticated\n            $injector.get('$state').go('home'); // redirect to home page\n          } else if (response.status === 404) {\n            $injector.get('$state').go('notfound');\n          }\n          return $q.reject(response);\n        }\n      };\n    }\n})();\n","/**\n * This service controll user authorisation\n**/\n\n(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('AuthService', AuthService);\n\n    AuthService.$inject = ['$resource'];\n    function AuthService($resource) {\n      return $resource('/auth/:type', {\n        type: '@type'\n      },\n      {\n        save: {\n          method: 'POST',\n          params: {\n            type: 'signup'\n          }\n        },\n        login: {\n          method: 'POST',\n          params: {\n            type: 'login'\n          }\n        }\n      });\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('CardService', CardService);\n\n    CardService.$inject = ['$resource'];\n    function CardService($resource) {\n      var data = $resource('/api/user/:user/lists/:list/cards/:card', { user: '@user', list: '@list', card: '@card' }, {\n        query: {\n          method: 'GET',\n          isArray: false\n        },\n        update:  {\n          method: 'PUT'\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('ListService', ListService);\n\n    ListService.$inject = ['$resource'];\n    function ListService($resource) {\n      var data = $resource('/api/user/:user/lists/:id:type', { user: '@user', id: '@id', type: '@type'}, {\n        query: {\n          method: 'GET',\n          isArray: false\n        },\n        update:  {\n          method: 'PUT'\n        },\n        sort: {\n          method: 'POST',\n          params: {\n            type: 'sort'\n          }\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .factory('UserService', UserService);\n\n    UserService.$inject = ['$resource'];\n    function UserService($resource) {\n      var data = $resource('/api/user/:type', { type: \"@type\" }, {\n        query: {\n          method: \"GET\",\n          isArray: false\n        },\n        avatar: {\n          method: \"PUT\",\n          params: {\n            type: \"avatar\"\n          }\n        },\n        background: {\n          method: \"PUT\",\n          params: {\n            type: \"background\"\n          }\n        },\n        update:  {\n          method: \"PUT\"\n        }\n      });\n\n      return data;\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('ListsPageController', ListsPageController);\n\n    ListsPageController.$inject = [\"$scope\", \"$stateParams\", \"ListService\"];\n    function ListsPageController($scope, $stateParams, ListService) {\n      var vm = this;\n      var user = $stateParams.username;\n      vm.visibleNewList = false;\n      vm.createNewList = createNewList;\n      vm.setVisibleNewList = setVisibleNewList;\n      vm.reloadLists = reloadLists;\n\n      activate();\n\n      $scope.listOptions = {\n        accept: function(sourceNodeScope, destNodesScope, destIndex) {\n          var list = sourceNodeScope.$element.hasClass(\"list__wrapper\");\n          var listPlaceholder = destNodesScope.$element.hasClass(\"list__placeholder\");\n          var card = sourceNodeScope.$element.hasClass(\"list__card\");\n          var cardPlaceholder = destNodesScope.$element.hasClass(\"card__placeholder\");\n\n          if (list === listPlaceholder) {\n            return true;\n          } if (card === cardPlaceholder) {\n            return true;\n          }\n        },\n        dropped: function() {\n          ListService.sort({ user: user }, {lists: vm.lists}, function(responce) {\n          });\n        }\n      }\n\n      // $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n      //   // $scope.$broadcast('content.reload');\n      //   // $scope.$broadcast('content.changed');\n      // });\n\n      function activate() {\n        ListService.get({ user: user }, function(responce) {\n          vm.lists = responce.lists;\n          document.body.className = responce.background;\n          setResizeScroll();\n        });\n      }\n\n      function createNewList() {\n        if (vm.newListTitle) {\n\n          ListService.save({ user: user }, { title: vm.newListTitle }, function (response) {\n            vm.lists = response.lists;\n\n            vm.focusOn = true;\n            vm.newListTitle = null;\n            setResizeScroll();\n          });\n        }\n      }\n\n      function setVisibleNewList() {\n        vm.visibleNewList = true;\n        vm.focusOn = true;\n      }\n\n      function reloadLists() {\n        ListService.get({ user: user }, function(responce) {\n          vm.lists = responce.lists;\n          setResizeScroll();\n        });\n      }\n\n      function setResizeScroll() {\n        var widthAllElemet = (vm.lists.length + 1) * 290;\n        document.querySelector('.lists__wrapper').style.width = widthAllElemet + 'px';\n        $scope.$broadcast('content.changed');\n      }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .controller('ProfilePageController', ProfilePageController);\n\n    ProfilePageController.$inject = ['$scope', '$window', 'UserService']\n    function ProfilePageController($scope, $window, UserService) {\n      var vm = this;\n      vm.updateData = updateData;\n      vm.changeAvatar = changeAvatar;\n\n      activate();\n\n      function activate() {\n        UserService.get({}, function(responce) {\n          vm.username = responce.user.name;\n          vm.email = responce.user.email;\n          vm.avatar = responce.user.avatar;\n        });\n      }\n\n      function updateData(validate) {\n\n        if (validate) {\n          var body = {\n            name: vm.username,\n            email: vm.email\n          };\n\n          UserService.update({}, body, function (response) {\n            vm.messageDone = response.message;\n            $window.localStorage.user = vm.username;\n            $scope.$emit('reloadUserData');\n          }, function (error) {\n            vm.messageError = error.data.message;\n          });\n        }\n      }\n\n      function changeAvatar(image) {\n        var reader;\n\n        if (image.type.localeCompare(\"image/jpeg\") !== 0 && image.type.localeCompare(\"image/png\") !== 0) {\n          alert('Image file format must be jpeg or png!');\n        }\n\n        reader = new FileReader();\n        reader.onload = function (event) {\n          UserService.avatar({}, { avatar: event.target.result }, function (response) {\n            vm.avatar = response.avatar;\n            $scope.$emit('reloadUserData');\n          });\n        }\n        reader.readAsDataURL(image);\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('card', cardDirective);\n\n    function cardDirective() {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          data: '=',\n          listId: '=',\n          reload: '&'\n        },\n        templateUrl: './scripts/common/directives/card/card.tpl.html',\n        controller: cardController,\n        controllerAs: 'vm',\n        bindToController: true\n      }\n\n      return directive;\n    }\n\n    cardController.$inject = ['$scope', '$stateParams', 'CardService'];\n    function cardController($scope, $stateParams, CardService) {\n      var vm = this;\n      var user = $stateParams.username;\n      var cardID = vm.data._id;\n      var listID = vm.listId;\n      var previousText;\n      vm.removeCard = removeCard;\n      vm.editCard = editCard;\n      vm.closeDropdown = closeDropdown;\n      vm.closeEditingCard = closeEditingCard;\n      vm.saveEditingCard = saveEditingCard;\n\n      $scope.$watch('vm.changeCardText', function(val) {\n        if (val === true) {\n          previousText = vm.data.text;\n          vm.focusOn = true;\n        }\n      })\n\n      function editCard() {\n        vm.showDropdown = (vm.showDropdown)\n        ? false\n        : true;\n      }\n\n      function closeDropdown() {\n        vm.showDropdown = false;\n      }\n\n      function closeEditingCard() {\n        vm.data.text = previousText;\n        vm.changeCardText = false;\n      }\n\n      function removeCard() {\n        CardService.delete({ user: user, list: listID, card: cardID }, function (response) {\n          vm.reload();\n        });\n      }\n\n      function saveEditingCard() {\n        if(vm.data.text) {\n          CardService.update({ user: user, list: listID, card: cardID }, { text: vm.data.text }, function (response) {\n            vm.changeCardText = false;\n          });\n        }\n      }\n      // console.log(vm.data)\n    }\n})();\n","(function() {\n\n'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('changeBackground', changeBackground)\n\n    changeBackground.$inject = ['$stateParams', 'UserService'];\n    function changeBackground($stateParams, UserService) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var user = $stateParams.username;\n        element.bind('click', clickHandler);\n\n        function clickHandler(event) {\n          UserService.background({ background: event.target.className, user: user }, function (response) {\n            document.body.className = event.target.className;\n          });\n        }\n      }\n    }\n\n}());\n","/**\n * This directive close dropdown by click on any other element\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"trelloProject\")\n    .directive(\"clickOutside\", clickOutsideDirective);\n\n    clickOutsideDirective.$inject = [\"$document\", \"$parse\"];\n    function clickOutsideDirective($document, $parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs['clickOutside']);\n\n        var eventHandler = function(event){\n\n          // any child element in directive elem\n          var childElement = element[0].contains(event.target);\n\n          if (!event || !event.target) {\n              return;\n          }\n\n          if (childElement) {\n            return;\n          }\n\n          return scope.$apply(function () {\n              return fn(scope);\n          });\n        }\n\n        $document.on(\"click\", eventHandler);\n\n        scope.$on(\"$destroy\", function() {\n          $document.off(\"click\", eventHandler);\n        });\n      }\n    }\n})();\n","(function() {\n\n'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('customFocus', customFocusDirective)\n\n    customFocusDirective.$inject = ['$timeout'];\n    function customFocusDirective($timeout) {\n      var directive = {\n        restrict: 'A',\n        scope: {\n          trigger: '=customFocus'\n        },\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        scope.$watch('trigger', function(value) {\n        if (value) {\n          $timeout(function() {\n            element[0].focus();\n            scope.trigger = false;\n          });\n        }\n      });\n      }\n    }\n\n}());\n","/**\n * This directive controll loading files\n */\n(function() {\n  \"use strict\";\n\n  angular\n    .module(\"trelloProject\")\n    .directive(\"fileReader\", fileReaderDirective);\n\n    fileReaderDirective.$inject = [\"$parse\"];\n    function fileReaderDirective($parse) {\n      var directive = {\n        restrict: \"A\",\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        var fn = $parse(attrs[\"fileReader\"]);\n\n        element.bind(\"change\", eventHandler);\n\n        function eventHandler(event) {\n          scope.$apply(function () {\n              fn(scope, { image: event.target.files[0] });\n          });\n        }\n      }\n    }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('list', listDirective);\n\n    function listDirective() {\n      var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {\n          data: '=',\n          reload: '&'\n        },\n        templateUrl: './scripts/common/directives/list/list.tpl.html',\n        controller: listController,\n        controllerAs: 'vm',\n        bindToController: true\n      }\n\n      return directive;\n\n    }\n\n    listController.$inject = ['$scope', '$stateParams', 'ListService', 'CardService'];\n    function listController($scope, $stateParams, ListService, CardService) {\n      var vm = this;\n      var user = $stateParams.username;\n      var listID = vm.data._id;\n\n      var previousText; // for saving\n\n      vm.visibleNewCard = false;\n      vm.saveNewTitle = saveNewTitle;\n      vm.closeDropdown = closeDropdown;\n      vm.createNewCard = createNewCard;\n      vm.showNewCardInput = showNewCardInput;\n      vm.removeList = removeList;\n      vm.cancelEditTitle = cancelEditTitle;\n      vm.reloadCard = reloadCard;\n\n      // watch start edit text or not\n      $scope.$watch('vm.visibleEditTitle', function(val) {\n        if (val === true) {\n          previousText = vm.data.title;\n          vm.focusOn = true;\n        }\n      })\n\n      function closeDropdown() {\n        vm.showDropdown = false;\n      }\n\n      function showNewCardInput() {\n        vm.visibleNewCard = true;\n        vm.focusOn = true;\n      }\n\n      function removeList() {\n        ListService.delete({user: user, id: listID }, function (response) {\n          vm.reload();\n        });\n      }\n\n      function createNewCard() {\n        if (vm.newCardsText) {\n          var newCards = {\n            text: vm.newCardsText\n          }\n\n          CardService.save({ user: user, list: listID }, { text: vm.newCardsText }, function (response) {\n            vm.data.cards = response.cards;\n            vm.focusOn = true;\n            vm.newCardsText = null;\n          });\n        }\n      }\n\n      function saveNewTitle(validate) {\n        if (validate) {\n          ListService.update({ user: user, id: listID }, { title: vm.data.title }, function(response) {\n            vm.visibleEditTitle = false;\n          })\n        }\n      }\n\n      function cancelEditTitle() {\n        vm.visibleEditTitle = false;\n        vm.data.title = previousText;\n      }\n\n      function reloadCard() {\n        CardService.get({ user: user, list: listID }, function(responce) {\n          vm.data.cards = responce.cards;\n        });\n      }\n    }\n})();\n","(function() {\n\n'use strict';\n\n  angular\n    .module('trelloProject')\n    .directive('onFinishRender', onFinishRender)\n\n    onFinishRender.$inject = ['$timeout'];\n    function onFinishRender($timeout) {\n      var directive = {\n        restrict: 'A',\n        link: linkFunc\n      }\n\n      return directive;\n\n      function linkFunc(scope, element, attrs) {\n        if (scope.$last === true) {\n          $timeout(function () {\n            scope.$emit('ngRepeatFinished');\n          });\n        }\n      }\n    }\n\n}());\n"],"sourceRoot":"/source/"}